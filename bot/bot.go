package bot

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"laverdad-bot/db"
	googleapi "laverdad-bot/google-api"
	"laverdad-bot/locales"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type State string

const (
	StateNone          State = ""
	StateEnterName     State = "enter_name"
	StateEnterNickname State = "enter_nickname"
	StateRegister      State = "register"
)

var userStates = map[int64]State{}

var laVerdadChatID = -4863046517

func HandleUpdate(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	if update.Message != nil {
		handleMessage(bot, update.Message)
	} else if update.CallbackQuery != nil {
		handleCallback(bot, update.CallbackQuery)
	}
}

func handleMessage(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	tgID := msg.From.ID
	tgUser := msg.From

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	state := userStates[chatID]

	switch state {
	case StateEnterName:
		db.UpdateUserName(int64(tgID), msg.Text)
		userStates[chatID] = StateEnterNickname
		sendText(bot, chatID, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π *–Ω–∏–∫*:")
		return

	case StateEnterNickname:
		db.UpdateUserNickname(int64(tgID), msg.Text)
		userStates[chatID] = StateNone
		sendText(bot, chatID, "–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n/events ‚Äî –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π\n/my ‚Äî –ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
		return
	}

	// –ö–æ–º–∞–Ω–¥—ã
	switch msg.Text {
	case "/start":
		text := "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–ª—É–±–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –º–∞—Ñ–∏–∏ *La Verdad*. \n–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—ã –∏ –Ω–µ —Ç–æ–ª—å–∫–æ üòâ"
		sendText(bot, chatID, text)

		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è

		user, err := db.GetOrCreateUser(int64(tgID), chatID, tgUser.UserName)
		if err != nil {
			log.Println("db.GetOrCreateUser error:", err)
		}
		if (user.Name == "" || user.Nickname == "") && state == StateNone {
			userStates[chatID] = StateEnterName
			sendText(bot, chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n\n–í–≤–µ–¥–∏ —Å–≤–æ—ë *–∏–º—è*:")
			return
		}

	case "/events":
		events := db.GetEvents()
		if len(events) == 0 {
			sendText(bot, chatID, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
			return
		}

		text := "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
		markup := tgbotapi.NewInlineKeyboardMarkup()
		var rows [][]tgbotapi.InlineKeyboardButton
		for _, e := range events {
			row := tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("%s ‚Äî %s", e.Title, e.StartsAt.Format("02.01 15:04")),
					fmt.Sprintf("ev_%d", e.ID),
				),
			)
			rows = append(rows, row)
		}
		markup.InlineKeyboard = rows
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ReplyMarkup = markup
		bot.Send(msg)

	case "/my":
		registrations := db.GetUserRegistrations(int64(tgID))
		if len(registrations) == 0 {
			sendText(bot, chatID, "–¢—ã –ø–æ–∫–∞ –Ω–∏–∫—É–¥–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω.")
			return
		}
		for _, r := range registrations {
			text := fmt.Sprintf("*%s*\n–°—Ç–∞—Ä—Ç: %s", r.Title, r.StartsAt.Format("02.01.2006 15:04"))
			btn := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å", fmt.Sprintf("cancel_%d", r.ID)),
				),
			)
			msg := tgbotapi.NewMessage(chatID, text)
			msg.ParseMode = "Markdown"
			msg.ReplyMarkup = btn
			bot.Send(msg)
		}

	default:
		// –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
		if IsAdmin(tgID) {
			HandleAdmin(bot, msg)
			return
		}
		sendText(bot, chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/events ‚Äî —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π\n/my ‚Äî –º–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
	}
}

func handleCallback(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	data := callback.Data
	chatID := callback.Message.Chat.ID
	tgID := callback.From.ID
	mesgID := callback.Message.MessageID

	if strings.HasPrefix(data, "ev_") {
		eventIDStr := strings.TrimPrefix(data, "ev_")
		eventID, _ := strconv.Atoi(eventIDStr)

		ev, err := db.FetchEvent(int64(eventID))
		if err != nil {
			log.Println("fetchEvent:", err)
			sendText(bot, chatID, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ.")
			return
		}

		// Already registered?
		user := db.GetUser(tgID)
		regExists := db.RegistrationExists(int64(eventID), int64(user.ID))

		text := ev.Description

		if regExists {
			text += "\n\n‚úÖ *–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã*"
		}

		edit := tgbotapi.NewEditMessageText(chatID, mesgID, text)
		edit.ParseMode = "Markdown"

		// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		if !regExists {
			btn := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", fmt.Sprintf("register_%d", eventID)),
				),
			)
			edit.ReplyMarkup = &btn
		}

		if _, err := bot.Send(edit); err != nil {
			log.Println("Event list event:", err)
		}

		bot.Request(tgbotapi.NewCallback(callback.ID, ""))
		return

	} else if strings.HasPrefix(data, "admin_ev_") {
		eventIDStr := strings.TrimPrefix(data, "admin_ev_")
		eventID, _ := strconv.Atoi(eventIDStr)

		event, err := db.FetchEvent(int64(eventID))
		if err != nil {
			sendText(bot, chatID, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ.")
			return
		}

		text := fmt.Sprintf("%s ‚Äî %s\n", event.Title, event.StartsAt.Format("02.01 15:04"))

		regs := db.GetRegistrationsByEvent(eventID)
		if len(regs) == 0 {
			text += "–ù–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!"
		} else {
			for _, r := range regs {
				text += fmt.Sprintf("- [%s  (%s)](tg://user?id=%s)\n", r.Name, r.Nickname, strconv.Itoa(int(r.TelegramID)))
			}
		}

		sendText(bot, chatID, text)

		return

	} else if strings.HasPrefix(data, "register_") {
		eventIDStr := strings.TrimPrefix(data, "register_")
		eventID, _ := strconv.Atoi(eventIDStr)

		err := db.RegisterUserToEvent(int64(tgID), eventID)
		if err != nil {
			sendText(bot, chatID, fmt.Sprintf("RegisterUserToEvent Error: %v", err))
			return
		}

		event, err := db.FetchEvent(int64(eventID))
		if err == nil {
			sheetName := fmt.Sprintf("%s - %s", event.Title, event.StartsAt.Format("02.01"))
			line, _ := db.GetRegistrationLine(int(tgID), eventID)

			go googleapi.AddRegistrationToSheet(sheetName, line)
			sendText(bot, chatID, "‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–æ–±—ã—Ç–∏–µ!")
		} else {
			log.Printf("Error FetchEvent with id=%d\n", int(eventID))
		}

	} else if strings.HasPrefix(data, "cancel_") {
		eventIDStr := strings.TrimPrefix(data, "cancel_")
		eventID, _ := strconv.Atoi(eventIDStr)

		regID := db.GetRegistrationID(int64(tgID), eventID)
		event, _ := db.FetchEvent(int64(eventID))
		sheetName := fmt.Sprintf("%s - %s", event.Title, event.StartsAt.Format("02.01"))
		go googleapi.UpdateRegistrationStateToSheet(regID, sheetName, time.Now())

		err := db.CancelUserRegistration(int64(tgID), eventID)
		if err != nil {
			sendText(bot, chatID, fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err))
			return
		}

		sendText(bot, chatID, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
	}

	cb := tgbotapi.NewCallback(callback.ID, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
	bot.Send(cb)
}

func sendText(bot *tgbotapi.BotAPI, chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	if _, err := bot.Send(msg); err != nil {
		log.Println("sendText error:", err)
	}
}

func StartNotifications(bot *tgbotapi.BotAPI) {
	ticker := time.NewTicker(time.Minute) // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
	defer ticker.Stop()

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
	reminders := []struct {
		duration   time.Duration
		statusFlag string
		messageFmt string
	}{
		{
			duration:   24 * time.Hour,
			statusFlag: "reminder24_sent",
			messageFmt: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ó–∞–≤—Ç—Ä–∞ –≤ %s –Ω–∞—á–Ω–µ—Ç—Å—è: %s",
		},
		{
			duration:   1 * time.Hour,
			statusFlag: "reminder1_sent",
			messageFmt: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ß–µ—Ä–µ–∑ —á–∞—Å –Ω–∞—á–Ω–µ—Ç—Å—è: %s",
		},
	}

	for range ticker.C {
		for _, r := range reminders {
			processReminder(bot, r.duration, r.statusFlag, r.messageFmt)
		}
		processQuorum(bot)
	}
}

func processQuorum(bot *tgbotapi.BotAPI) {
	events := db.GetUpcomingEvents(6 * time.Hour * 24)
	for _, e := range events {
		count, err := db.GetEventParticipantsCount(e.ID)
		if err != nil {
			log.Printf("Error processQuorum for event.id=%d, error: %v\n", e.ID, err)
			continue
		}
		// if registrations >= 12 send notification
		if count >= 12 {
			users, err := db.GetEventParticipants(e.ID)
			if err != nil {
				log.Printf("Error processQuorum for event.id=%d, error: %v\n", e.ID, err)
				continue
			}
			timeText := locales.FormatDateShortRU(e.StartsAt) + e.StartsAt.Format("üïê 15:04.")
			text := fmt.Sprintf(`–ï—Å—Ç—å –∫–≤–æ—Ä—É–º!

%s
üóì %s
üìå %s
üí∂ –î–æ–Ω–∞—Ç –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–ª—É–±–∞ - 5‚Ç¨ —Å —á–µ–ª–æ–≤–µ–∫–∞.

–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –æ–ø–æ–∑–¥–∞—Ç—å. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ. –ñ–¥—ë–º! üïµÔ∏è‚Äç‚ôÇÔ∏è
`, e.Title, timeText, e.Location)

			for i, u := range users {
				text += fmt.Sprintf("%d) @%s\n", i+1, u.Nickname)
			}
			sendText(bot, int64(laVerdadChatID), text)
		}
	}
}

func processReminder(bot *tgbotapi.BotAPI, duration time.Duration, statusFlag, messageFmt string) {
	events := db.GetUpcomingEvents(duration)
	var eventIDs []string

	for _, e := range events {
		eventIDs = append(eventIDs, strconv.Itoa(e.ID))
		users := db.GetEventParticipantsWithFlag(e.ID, statusFlag)

		for _, u := range users {
			var text string
			if duration == 24*time.Hour {
				// –¥–ª—è —Å—É—Ç–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
				text = fmt.Sprintf(messageFmt, e.StartsAt.Format("15:04 02.01.2006"), e.Title)
			} else {
				text = fmt.Sprintf(messageFmt, e.Title)
			}
			msg := tgbotapi.NewMessage(u.ChatID, text)
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", u.ChatID, err)
			}
		}
	}

	if len(eventIDs) > 0 {
		if err := db.UpdateRegistrationNotificationStatus(eventIDs, statusFlag); err != nil {
			log.Println(err)
		}
	}
}
